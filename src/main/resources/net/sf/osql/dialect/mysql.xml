<?xml version="1.0" encoding="UTF-8"?>
<table xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<define>
	<var name="escape">
		<xsl:value-of select="replace(replace(., '\\', '\\\\'), '''', '\\''')"/>
	</var>
</define>
<definition>
CREATE TABLE `<use name="name"/>` (<link name="root">
	`id` int NOT NULL AUTO_INCREMENT PRIMARY KEY</link><link name="child">
	`id` int NOT NULL PRIMARY KEY,
	`type` enum('<join delimiter="','"><use name="siblings"/></join>') NOT NULL DEFAULT '<use name="name"/>',
	KEY `type` (`type`,`id`),
	CONSTRAINT `<use name="name"/>_ibfk_1` FOREIGN KEY (`type`,`id`) REFERENCES `<use name="from"/>`(`subtype`,`id`)</link><link name="parent">,
	`subtype` enum('<join delimiter="','"><use name="subtypes"/></join>') <link name="notnull">NOT </link>NULL,
	KEY `subtype` (`subtype`,`id`)</link><link name="columns"><link name="present">,
	`<use name="name"/>` <use name="type"/><link name="notnull"> NOT</link> NULL<link name="unique"> UNIQUE</link><link name="default"> DEFAULT <use name="default"/></link><link name="comment"> COMMENT '<call name="escape"><use name="comment"/></call>'</link></link></link><link name="index">,
	KEY `<use name="name"/>` (`<join delimiter="`,`"><use name="columns"/></join>`)</link><link name="unique">,
	UNIQUE `<use name="name"/>` (`<join delimiter="`,`"><use name="columns"/></join>`)</link>
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
</definition>
<constraints>
ALTER TABLE `<use name="name"/>` ADD CONSTRAINT `<use name="name"/>_ibfk_<use name="number"/>` FOREIGN KEY (`<use name="reference"/>`) REFERENCES `<use name="target"/>`(`id`)<link name="setnull"> ON DELETE SET NULL</link>;
</constraints>
<triggers>
DELIMITER $$
<trigger event="before" action="insert">
DROP TRIGGER IF EXISTS `before<use name="name"/>insert`$$
CREATE TRIGGER `before<use name="name"/>insert` BEFORE INSERT ON `<use name="name"/>` FOR EACH ROW
BEGIN<link name="beforeinsert">
	BEGIN
		<use name="beforeinsert"/>
	END;</link><link name="child">
	SET NEW.`id` = @id;
	SET NEW.`type` = '<use name="name"/>';</link><link name="parent">
	SET NEW.`subtype` = @_<use name="name"/>;</link><link name="columns"><link name="present">
	SET NEW.`<use name="name"/>` = IF(@<use name="name"/> IS NULL, NEW.`<use name="name"/>`, @<use name="name"/>);</link></link>
END $$
</trigger>
<trigger event="after" action="insert">
DROP TRIGGER IF EXISTS `after<use name="name"/>insert`$$
CREATE TRIGGER `after<use name="name"/>insert` AFTER INSERT ON `<use name="name"/>` FOR EACH ROW
BEGIN<link name="parent">
	SET @id = NEW.`id`;
	CASE NEW.`subtype`<link name="subtype">
		WHEN '<use name="name"/>' THEN INSERT INTO `<use name="name"/>` VALUES ();</link><link name="abstract">
		ELSE BEGIN
			DECLARE msg text DEFAULT concat('Unknown type "',NEW.`subtype`,'" for after insert trigger');
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= msg;
		END;</link>
	END CASE;</link><link name="dependant">
	CASE @$ref<link name="link">
		WHEN '<use name="sname"/>' THEN
			UPDATE `<use name="document"/>` SET `<use name="name"/>`=NEW.`id` WHERE `id`=@$rid;
			IF ROW_COUNT()=0 THEN
			BEGIN
				DECLARE msg text DEFAULT concat('Not found object id "',if(@$rid is null, 'null', @$rid),'" for reference "',@ref,'" in after insert trigger');
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= msg;
			END;
			END IF;</link>
		ELSE BEGIN
			DECLARE msg text DEFAULT if(@$ref is null, '<use name="name"/> must be referenced', concat('Unknown reference "',@$ref,'" for after insert trigger'));
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= msg;
		END;
	END CASE;</link><link name="afterinsert">
	BEGIN
		<use name="afterinsert"/>
	END;</link>
END $$
</trigger>
<trigger event="before" action="update">
DROP TRIGGER IF EXISTS `before<use name="name"/>update`$$
CREATE TRIGGER `before<use name="name"/>update` BEFORE UPDATE ON `<use name="name"/>` FOR EACH ROW
BEGIN<link name="beforeupdate">
	BEGIN
		<use name="beforeupdate"/>
	END;</link><link name="child">
	SET NEW.`type` = '<use name="name"/>';<link name="verify-inherited">
	IF NOT EXISTS (
		SELECT * 
		FROM <use name="from"/> 
		WHERE (`id` = OLD.`id`)<link name="inherited">
		AND (`<use name="name"/>` IS NULL AND NEW.`<use name="name"/>` IS NULL OR `<use name="name"/>` = NEW.`<use name="name"/>`)</link>
	) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= 'Invalid inherited values for before update trigger';
	END IF;</link></link><link name="compositions">
	<var name="composition">(OLD.`<use name="name"/>` IS NOT NULL AND (NEW.`<use name="name"/>` IS NULL OR NEW.`<use name="name"/>`!=OLD.`<use name="name"/>`))
	</var>
	IF <join delimiter="OR "><use name="composition"/></join>THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= 'Invalid reference values for before update trigger';
	END IF;</link>
END $$
</trigger>
<trigger event="after" action="update">
DROP TRIGGER IF EXISTS `after<use name="name"/>update`$$
CREATE TRIGGER `after<use name="name"/>update` AFTER UPDATE ON `<use name="name"/>` FOR EACH ROW
BEGIN<link name="inherit">
	CASE OLD.`subtype`<link name="subtype">
		<var name="inherit">
			`<use name="name"/>` = NEW.`<use name="name"/>`</var>
		WHEN '<use name="name"/>' THEN UPDATE `<use name="name"/>` SET <join delimiter=", "><use name="inherit"/></join>
			WHERE `id`=OLD.`id`;</link>
	END CASE;</link><link name="afterupdate">
	BEGIN
		<use name="afterupdate"/>
	END;</link>
END $$
</trigger>
<trigger event="before" action="delete">
DROP TRIGGER IF EXISTS `before<use name="name"/>delete`$$
CREATE TRIGGER `before<use name="name"/>delete` BEFORE DELETE ON `<use name="name"/>` FOR EACH ROW
BEGIN<link name="beforedelete">
	BEGIN
		<use name="beforedelete"/>
	END;</link>
END $$
</trigger>
<trigger event="after" action="delete">
DROP TRIGGER IF EXISTS `after<use name="name"/>delete`$$
CREATE TRIGGER `after<use name="name"/>delete` AFTER DELETE ON `<use name="name"/>` FOR EACH ROW
BEGIN<link name="child">
	DELETE FROM `<use name="from"/>` WHERE `id`=old.`id` AND `subtype`=old.`type`;</link><link name="compositions">
	BEGIN
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END;<var name="composition">
		DELETE FROM `<use name="document"/>` WHERE `id`=old.`<use name="name"/>`;</var><use name="composition"/>
	END;</link><link name="afterdelete">
	BEGIN
		<use name="afterdelete"/>
	END;</link>
END $$
</trigger>
DELIMITER ;
</triggers>
<insertion>
<var name="null">NULL</var>
<var name="string">'<use name="string"/>'</var>
<link name="set">
SET @<use name="name"/> = <use name="value"/>;</link>
INSERT INTO `<use name="into"/>` VALUES();
</insertion>
<itable>
DROP TABLE IF EXISTS `i_<use name="name"/>`;
CREATE TABLE `i_<use name="name"/>` (<join delimiter=","><link name="columns"><item>
	`<use name="name"/>` <use name="type"/></item></link></join>
) ENGINE=BlackHole DEFAULT CHARSET=utf8;
DELIMITER $$
CREATE TRIGGER `beforei_<use name="name"/>insert` BEFORE INSERT ON `i_<use name="name"/>` FOR EACH ROW 
BEGIN<link name="columns">
	SET @<use name="name"/> = NEW.`<use name="name"/>`;</link><link name="path">
	SET @<use name="name"/> = '<use name="string"/>';</link>
	INSERT INTO `<use name="into"/>` values();
END $$
DELIMITER ;
</itable>
</table>